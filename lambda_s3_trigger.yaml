AWSTemplateFormatVersion : "2010-09-09"
Description: "AWS Lambda with S3 bucket trigger. It will create all the required resources and set the trigger."

Parameters:
    S3BucketName:
        Description: Enter S3 bucket name
        Type: String
        MinLength: 3
        MaxLength: 10
        AllowedPattern: "^[A-Za-z0-9_-]*$"

    IAMRoleName:
        Description: Enter IAM role name
        Type: String
        MinLength: 3
        MaxLength: 10
        AllowedPattern: "^[A-Za-z0-9_-]*$"

    LambdaFunctionName:
        Description: Enter Lambda function name
        Type: String
        MinLength: 3
        MaxLength: 10
        AllowedPattern: "^[A-Za-z0-9_-]*$"


Resources:
    S3Bucket:
        Type: AWS::S3::Bucket
        DependsOn: 
            - InvokeLambdaPermission
        Properties:
            BucketName: !Join [ '-', [ !Ref S3BucketName, !Ref AWS::StackName, !Ref AWS::Region ] ]
            NotificationConfiguration:
                LambdaConfigurations:
                    - Event: s3:ObjectCreated:*
                      Function: !GetAtt LambdaFunction.Arn
                      Filter:
                          S3Key:
                              Rules:
                                  - Name: suffix
                                    Value: .jpeg

    InvokeLambdaPermission:
        Type: AWS::Lambda::Permission
        Properties:
            Action: lambda:InvokeFunction
            FunctionName: !Ref LambdaFunction
            Principal: s3.amazonaws.com
            SourceArn: !Sub
                - 'arn:aws:s3:::${S3Bucket}'
                - { S3Bucket: !Join [ '-', [ !Ref S3BucketName, !Ref AWS::StackName, !Ref AWS::Region ] ] }

    IAMRole:
        Type: AWS::IAM::Role
        Properties:
            RoleName: !Join [ '-', [ !Ref IAMRoleName, !Ref AWS::StackName, !Ref AWS::Region ] ]
            ManagedPolicyArns: 
                - arn:aws:iam::aws:policy/AWSLambdaExecute

            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                - Effect: Allow
                  Principal:
                    Service:
                    - lambda.amazonaws.com
                  Action:
                  - sts:AssumeRole

    LambdaFunction:
        Type: AWS::Lambda::Function
        Properties:
            FunctionName: !Join [ '-', [ !Ref LambdaFunctionName, !Ref AWS::StackName, !Ref AWS::Region ] ]
            Handler: index.lambda_handler
            Runtime: python3.8
            Role: !GetAtt IAMRole.Arn
            Code:
                ZipFile: |
                  import json
                  def lambda_handler(event, context):
                      print(f"Event: {event}")
                      return {
                            'statusCode': 200,
                            'body': json.dumps('Hello from Lambda!')
                        }
